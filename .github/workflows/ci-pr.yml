name: CI / Build Memos (PR)

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'memos/**'
      - 'uploads/**'
      - 'notebooks/**'
      - 'docs/notebooks.json'
      - 'docs/assets/js/**'
      - 'docs/index.html'
      - '.github/workflows/ci-pr.yml'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install TeX Live & unzip
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-extra texlive-publishers latexmk unzip

    - name: Unzip memo ZIPs
      run: |
        # Unzip any ZIP files placed directly in memos/
        for z in memos/*.zip; do
          if [[ -f "$z" ]]; then
            name=$(basename "$z" .zip)
            mkdir -p "memos/$name"
            echo "Unzipping $z to memos/$name/"
            unzip -o "$z" -d "memos/$name"
          fi
        done
        # Unzip any ZIPs inside memo subfolders
        for dir in memos/*/ ; do
          for z in "$dir"/*.zip; do
            if [[ -f "$z" ]]; then
              echo "Unzipping $z to $dir"
              unzip -o "$z" -d "$dir"
            fi
          done
        done

    - name: Compile LaTeX memos
      run: |
        mkdir -p docs/pdfs
        # Compile each memo directory, naming PDF after the folder
        for dir in memos/*/ ; do
          name=$(basename "$dir")
          echo "Processing memo $name"
          (
            cd "$dir"
            texfile=$(ls *.tex | head -n1)
            echo "Compiling $texfile as $name.pdf"
            latexmk -pdf \
              -jobname="$name" \
              -output-directory="../../docs/pdfs" \
              "$texfile"
          )
        done
        # Clean auxiliary files
        find docs/pdfs -type f ! -name '*.pdf' -delete

    - name: Generate memo catalog with persistent numbering
      run: |
        python - <<'PY'
        import json, os, re, subprocess
        from datetime import datetime, timezone
        from pathlib import Path

        REPO = Path(".").resolve()
        MEMOS_DIR = REPO / "memos"
        CATALOG_FILE = REPO / "docs" / "memo_catalog.json"

        def git_first_commit_date(path: Path) -> str:
          """Get the date of the FIRST commit that touched this path"""
          try:
            iso = subprocess.check_output(
              ["git", "log", "--follow", "--diff-filter=A", "--format=%cI", "--", str(path)],
              text=True
            ).strip().split('\n')[-1]  # Get the last line (oldest commit)
            return iso or datetime.now(timezone.utc).isoformat()
          except Exception:
            return datetime.now(timezone.utc).isoformat()

        def parse_latex_metadata(tex_path: Path):
          """Extract title, authors, tags from LaTeX comments or commands"""
          metadata = {"title": tex_path.stem, "authors": [], "tags": [], "summary": ""}
          
          try:
            content = tex_path.read_text(encoding='utf-8', errors='ignore')
            
            # Look for % TITLE: ... or \title{...}
            title_match = re.search(r'%\s*TITLE:\s*(.+)', content) or \
                         re.search(r'\\title\{([^}]+)\}', content)
            if title_match:
              metadata["title"] = title_match.group(1).strip()
            
            # Look for % AUTHORS: ... or \author{...}
            authors_match = re.search(r'%\s*AUTHORS?:\s*(.+)', content) or \
                           re.search(r'\\author\{([^}]+)\}', content)
            if authors_match:
              authors_str = authors
